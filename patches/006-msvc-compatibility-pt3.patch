diff --git a/quickjs.h b/quickjs.h
--- a/quickjs.h
+++ b/quickjs.h
@@ -205,7 +205,7 @@ static inline JS_BOOL JS_VALUE_IS_NAN(JSValue v)
 typedef union JSValueUnion {
     int32_t int32;
     double float64;
-    void *ptr;
+    uintptr_t ptr;
 } JSValueUnion;
 
 typedef struct JSValue {
@@ -223,10 +223,10 @@ typedef struct JSValue {
 #define JS_VALUE_GET_INT(v) ((v).u.int32)
 #define JS_VALUE_GET_BOOL(v) ((v).u.int32)
 #define JS_VALUE_GET_FLOAT64(v) ((v).u.float64)
-#define JS_VALUE_GET_PTR(v) ((v).u.ptr)
+#define JS_VALUE_GET_PTR(v) ((void *)((v).u.ptr))
 
 #define JS_MKVAL(tag, val) (JSValue){ (JSValueUnion){ .int32 = val }, tag }
-#define JS_MKPTR(tag, p) (JSValue){ (JSValueUnion){ .ptr = p }, tag }
+#define JS_MKPTR(tag, p) (JSValue){ (JSValueUnion){ .ptr = (uintptr_t)(void *)p }, tag }
 
 #if defined(__cplusplus)
 #undef JS_MKVAL
@@ -234,7 +234,7 @@ typedef struct JSValue {
 #define with(T, ...)\
 	([&]{ T t{}; __VA_ARGS__; return t; }())
 #define JS_MKVAL(tag, val) JSValue{ with(JSValueUnion, t.int32 = val), tag }
-#define JS_MKPTR(tag, p) JSValue{ with(JSValueUnion, t.ptr = p), tag }
+#define JS_MKPTR(tag, p) JSValue{ with(JSValueUnion, t.ptr = (uintptr_t)(void *)p), tag }
 #endif
 
 #define JS_TAG_IS_FLOAT64(tag) ((unsigned)(tag) == JS_TAG_FLOAT64)
